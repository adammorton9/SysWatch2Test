//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SysWatchTester.QASysWatch2 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="XmlServiceSoap", Namespace="http://syswatch2.nextace.com/")]
    public partial class XmlService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback TestLoggerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListAllTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback AlterTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateInstanceControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteInstanceControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInstanceControlListOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatsByPropertyServerAndDateRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitJobWithDelayOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitJobWithCombineOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitJobWithCombineAndDelayOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitJobWithOutputPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitJobWithOutputPathAndDelayOperationCompleted;
        
        private System.Threading.SendOrPostCallback XOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatusesOperationCompleted;
        
        private System.Threading.SendOrPostCallback OcrCompletedCallBackOperationCompleted;
        
        private System.Threading.SendOrPostCallback CombineCompletedCallBackOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitJobWithOcrOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitJobWithOcrAndDelayOperationCompleted;
        
        private System.Threading.SendOrPostCallback SissyWatchStatsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllInstanceControlsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobSimpleDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnfinishedJobsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobDebugByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessingBoxCpuUsageOperationCompleted;
        
        private System.Threading.SendOrPostCallback IssueKillCommandOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestMethodOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobIdFromHostnameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobIdFromHostnameDebugOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeTaskServerTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeServerTypeIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeServerAnyIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddServerToServerTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRejectOrderTaskExceptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetJobsThatContainValueOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public XmlService() {
            this.Url = global::SysWatchTester.Properties.Settings.Default.SysWatchTester_QASysWatch2_XmlService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event TestLoggerCompletedEventHandler TestLoggerCompleted;
        
        /// <remarks/>
        public event ListAllTasksCompletedEventHandler ListAllTasksCompleted;
        
        /// <remarks/>
        public event AlterTaskCompletedEventHandler AlterTaskCompleted;
        
        /// <remarks/>
        public event DeleteTaskCompletedEventHandler DeleteTaskCompleted;
        
        /// <remarks/>
        public event UpdateInstanceControlCompletedEventHandler UpdateInstanceControlCompleted;
        
        /// <remarks/>
        public event DeleteInstanceControlCompletedEventHandler DeleteInstanceControlCompleted;
        
        /// <remarks/>
        public event GetInstanceControlListCompletedEventHandler GetInstanceControlListCompleted;
        
        /// <remarks/>
        public event NotifyCompletedEventHandler NotifyCompleted;
        
        /// <remarks/>
        public event GetStatsByPropertyServerAndDateRangeCompletedEventHandler GetStatsByPropertyServerAndDateRangeCompleted;
        
        /// <remarks/>
        public event SubmitJobCompletedEventHandler SubmitJobCompleted;
        
        /// <remarks/>
        public event SubmitJobWithDelayCompletedEventHandler SubmitJobWithDelayCompleted;
        
        /// <remarks/>
        public event SubmitJobWithCombineCompletedEventHandler SubmitJobWithCombineCompleted;
        
        /// <remarks/>
        public event SubmitJobWithCombineAndDelayCompletedEventHandler SubmitJobWithCombineAndDelayCompleted;
        
        /// <remarks/>
        public event SubmitJobWithOutputPathCompletedEventHandler SubmitJobWithOutputPathCompleted;
        
        /// <remarks/>
        public event SubmitJobWithOutputPathAndDelayCompletedEventHandler SubmitJobWithOutputPathAndDelayCompleted;
        
        /// <remarks/>
        public event XCompletedEventHandler XCompleted;
        
        /// <remarks/>
        public event GetTaskListCompletedEventHandler GetTaskListCompleted;
        
        /// <remarks/>
        public event GetStatusesCompletedEventHandler GetStatusesCompleted;
        
        /// <remarks/>
        public event OcrCompletedCallBackCompletedEventHandler OcrCompletedCallBackCompleted;
        
        /// <remarks/>
        public event CombineCompletedCallBackCompletedEventHandler CombineCompletedCallBackCompleted;
        
        /// <remarks/>
        public event SubmitJobWithOcrCompletedEventHandler SubmitJobWithOcrCompleted;
        
        /// <remarks/>
        public event SubmitJobWithOcrAndDelayCompletedEventHandler SubmitJobWithOcrAndDelayCompleted;
        
        /// <remarks/>
        public event SissyWatchStatsCompletedEventHandler SissyWatchStatsCompleted;
        
        /// <remarks/>
        public event GetAllInstanceControlsCompletedEventHandler GetAllInstanceControlsCompleted;
        
        /// <remarks/>
        public event GetJobDataCompletedEventHandler GetJobDataCompleted;
        
        /// <remarks/>
        public event GetJobSimpleDataCompletedEventHandler GetJobSimpleDataCompleted;
        
        /// <remarks/>
        public event GetUnfinishedJobsCompletedEventHandler GetUnfinishedJobsCompleted;
        
        /// <remarks/>
        public event GetJobDebugByIdCompletedEventHandler GetJobDebugByIdCompleted;
        
        /// <remarks/>
        public event GetProcessingBoxCpuUsageCompletedEventHandler GetProcessingBoxCpuUsageCompleted;
        
        /// <remarks/>
        public event IssueKillCommandCompletedEventHandler IssueKillCommandCompleted;
        
        /// <remarks/>
        public event TestMethodCompletedEventHandler TestMethodCompleted;
        
        /// <remarks/>
        public event GetJobIdFromHostnameCompletedEventHandler GetJobIdFromHostnameCompleted;
        
        /// <remarks/>
        public event GetJobIdFromHostnameDebugCompletedEventHandler GetJobIdFromHostnameDebugCompleted;
        
        /// <remarks/>
        public event ChangeTaskServerTypeCompletedEventHandler ChangeTaskServerTypeCompleted;
        
        /// <remarks/>
        public event ChangeServerTypeIdCompletedEventHandler ChangeServerTypeIdCompleted;
        
        /// <remarks/>
        public event ChangeServerAnyIdCompletedEventHandler ChangeServerAnyIdCompleted;
        
        /// <remarks/>
        public event AddServerToServerTableCompletedEventHandler AddServerToServerTableCompleted;
        
        /// <remarks/>
        public event AddRejectOrderTaskExceptionCompletedEventHandler AddRejectOrderTaskExceptionCompleted;
        
        /// <remarks/>
        public event GetJobsThatContainValueCompletedEventHandler GetJobsThatContainValueCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/TestLogger", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestLogger() {
            object[] results = this.Invoke("TestLogger", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestLoggerAsync() {
            this.TestLoggerAsync(null);
        }
        
        /// <remarks/>
        public void TestLoggerAsync(object userState) {
            if ((this.TestLoggerOperationCompleted == null)) {
                this.TestLoggerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestLoggerOperationCompleted);
            }
            this.InvokeAsync("TestLogger", new object[0], this.TestLoggerOperationCompleted, userState);
        }
        
        private void OnTestLoggerOperationCompleted(object arg) {
            if ((this.TestLoggerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestLoggerCompleted(this, new TestLoggerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/ListAllTasks", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskDefinition[] ListAllTasks() {
            object[] results = this.Invoke("ListAllTasks", new object[0]);
            return ((TaskDefinition[])(results[0]));
        }
        
        /// <remarks/>
        public void ListAllTasksAsync() {
            this.ListAllTasksAsync(null);
        }
        
        /// <remarks/>
        public void ListAllTasksAsync(object userState) {
            if ((this.ListAllTasksOperationCompleted == null)) {
                this.ListAllTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListAllTasksOperationCompleted);
            }
            this.InvokeAsync("ListAllTasks", new object[0], this.ListAllTasksOperationCompleted, userState);
        }
        
        private void OnListAllTasksOperationCompleted(object arg) {
            if ((this.ListAllTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListAllTasksCompleted(this, new ListAllTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/AlterTask", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AlterTask(int taskId, short taskTypeId, string name, string monitoringSetKey, int maxTimeSeconds, string target) {
            this.Invoke("AlterTask", new object[] {
                        taskId,
                        taskTypeId,
                        name,
                        monitoringSetKey,
                        maxTimeSeconds,
                        target});
        }
        
        /// <remarks/>
        public void AlterTaskAsync(int taskId, short taskTypeId, string name, string monitoringSetKey, int maxTimeSeconds, string target) {
            this.AlterTaskAsync(taskId, taskTypeId, name, monitoringSetKey, maxTimeSeconds, target, null);
        }
        
        /// <remarks/>
        public void AlterTaskAsync(int taskId, short taskTypeId, string name, string monitoringSetKey, int maxTimeSeconds, string target, object userState) {
            if ((this.AlterTaskOperationCompleted == null)) {
                this.AlterTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAlterTaskOperationCompleted);
            }
            this.InvokeAsync("AlterTask", new object[] {
                        taskId,
                        taskTypeId,
                        name,
                        monitoringSetKey,
                        maxTimeSeconds,
                        target}, this.AlterTaskOperationCompleted, userState);
        }
        
        private void OnAlterTaskOperationCompleted(object arg) {
            if ((this.AlterTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AlterTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/DeleteTask", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteTask(int taskId) {
            this.Invoke("DeleteTask", new object[] {
                        taskId});
        }
        
        /// <remarks/>
        public void DeleteTaskAsync(int taskId) {
            this.DeleteTaskAsync(taskId, null);
        }
        
        /// <remarks/>
        public void DeleteTaskAsync(int taskId, object userState) {
            if ((this.DeleteTaskOperationCompleted == null)) {
                this.DeleteTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTaskOperationCompleted);
            }
            this.InvokeAsync("DeleteTask", new object[] {
                        taskId}, this.DeleteTaskOperationCompleted, userState);
        }
        
        private void OnDeleteTaskOperationCompleted(object arg) {
            if ((this.DeleteTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/UpdateInstanceControl", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateInstanceControl(string label, int maxNumberInstances) {
            object[] results = this.Invoke("UpdateInstanceControl", new object[] {
                        label,
                        maxNumberInstances});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateInstanceControlAsync(string label, int maxNumberInstances) {
            this.UpdateInstanceControlAsync(label, maxNumberInstances, null);
        }
        
        /// <remarks/>
        public void UpdateInstanceControlAsync(string label, int maxNumberInstances, object userState) {
            if ((this.UpdateInstanceControlOperationCompleted == null)) {
                this.UpdateInstanceControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateInstanceControlOperationCompleted);
            }
            this.InvokeAsync("UpdateInstanceControl", new object[] {
                        label,
                        maxNumberInstances}, this.UpdateInstanceControlOperationCompleted, userState);
        }
        
        private void OnUpdateInstanceControlOperationCompleted(object arg) {
            if ((this.UpdateInstanceControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateInstanceControlCompleted(this, new UpdateInstanceControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/DeleteInstanceControl", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteInstanceControl(string label) {
            object[] results = this.Invoke("DeleteInstanceControl", new object[] {
                        label});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteInstanceControlAsync(string label) {
            this.DeleteInstanceControlAsync(label, null);
        }
        
        /// <remarks/>
        public void DeleteInstanceControlAsync(string label, object userState) {
            if ((this.DeleteInstanceControlOperationCompleted == null)) {
                this.DeleteInstanceControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteInstanceControlOperationCompleted);
            }
            this.InvokeAsync("DeleteInstanceControl", new object[] {
                        label}, this.DeleteInstanceControlOperationCompleted, userState);
        }
        
        private void OnDeleteInstanceControlOperationCompleted(object arg) {
            if ((this.DeleteInstanceControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteInstanceControlCompleted(this, new DeleteInstanceControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/GetInstanceControlList", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInstanceControlList() {
            object[] results = this.Invoke("GetInstanceControlList", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInstanceControlListAsync() {
            this.GetInstanceControlListAsync(null);
        }
        
        /// <remarks/>
        public void GetInstanceControlListAsync(object userState) {
            if ((this.GetInstanceControlListOperationCompleted == null)) {
                this.GetInstanceControlListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstanceControlListOperationCompleted);
            }
            this.InvokeAsync("GetInstanceControlList", new object[0], this.GetInstanceControlListOperationCompleted, userState);
        }
        
        private void OnGetInstanceControlListOperationCompleted(object arg) {
            if ((this.GetInstanceControlListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstanceControlListCompleted(this, new GetInstanceControlListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/Notify", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Notify(int id) {
            this.Invoke("Notify", new object[] {
                        id});
        }
        
        /// <remarks/>
        public void NotifyAsync(int id) {
            this.NotifyAsync(id, null);
        }
        
        /// <remarks/>
        public void NotifyAsync(int id, object userState) {
            if ((this.NotifyOperationCompleted == null)) {
                this.NotifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyOperationCompleted);
            }
            this.InvokeAsync("Notify", new object[] {
                        id}, this.NotifyOperationCompleted, userState);
        }
        
        private void OnNotifyOperationCompleted(object arg) {
            if ((this.NotifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/GetStatsByPropertyServerAndDateRange", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public JobStat[] GetStatsByPropertyServerAndDateRange(int propertyId, int serverId, string startDate, string endDate) {
            object[] results = this.Invoke("GetStatsByPropertyServerAndDateRange", new object[] {
                        propertyId,
                        serverId,
                        startDate,
                        endDate});
            return ((JobStat[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStatsByPropertyServerAndDateRangeAsync(int propertyId, int serverId, string startDate, string endDate) {
            this.GetStatsByPropertyServerAndDateRangeAsync(propertyId, serverId, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void GetStatsByPropertyServerAndDateRangeAsync(int propertyId, int serverId, string startDate, string endDate, object userState) {
            if ((this.GetStatsByPropertyServerAndDateRangeOperationCompleted == null)) {
                this.GetStatsByPropertyServerAndDateRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatsByPropertyServerAndDateRangeOperationCompleted);
            }
            this.InvokeAsync("GetStatsByPropertyServerAndDateRange", new object[] {
                        propertyId,
                        serverId,
                        startDate,
                        endDate}, this.GetStatsByPropertyServerAndDateRangeOperationCompleted, userState);
        }
        
        private void OnGetStatsByPropertyServerAndDateRangeOperationCompleted(object arg) {
            if ((this.GetStatsByPropertyServerAndDateRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatsByPropertyServerAndDateRangeCompleted(this, new GetStatsByPropertyServerAndDateRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/SubmitJob", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SubmitJob(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, int parentJobId, string referringTaskUrl, string instanceControlLabel) {
            object[] results = this.Invoke("SubmitJob", new object[] {
                        sourceId,
                        sourceTypeId,
                        sourceOrderId,
                        url,
                        queryString,
                        parentJobId,
                        referringTaskUrl,
                        instanceControlLabel});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitJobAsync(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, int parentJobId, string referringTaskUrl, string instanceControlLabel) {
            this.SubmitJobAsync(sourceId, sourceTypeId, sourceOrderId, url, queryString, parentJobId, referringTaskUrl, instanceControlLabel, null);
        }
        
        /// <remarks/>
        public void SubmitJobAsync(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, int parentJobId, string referringTaskUrl, string instanceControlLabel, object userState) {
            if ((this.SubmitJobOperationCompleted == null)) {
                this.SubmitJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitJobOperationCompleted);
            }
            this.InvokeAsync("SubmitJob", new object[] {
                        sourceId,
                        sourceTypeId,
                        sourceOrderId,
                        url,
                        queryString,
                        parentJobId,
                        referringTaskUrl,
                        instanceControlLabel}, this.SubmitJobOperationCompleted, userState);
        }
        
        private void OnSubmitJobOperationCompleted(object arg) {
            if ((this.SubmitJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitJobCompleted(this, new SubmitJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/SubmitJobWithDelay", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SubmitJobWithDelay(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, int parentJobId, string referringTaskUrl, string instanceControlLabel, int runAfterDelaySeconds) {
            object[] results = this.Invoke("SubmitJobWithDelay", new object[] {
                        sourceId,
                        sourceTypeId,
                        sourceOrderId,
                        url,
                        queryString,
                        parentJobId,
                        referringTaskUrl,
                        instanceControlLabel,
                        runAfterDelaySeconds});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitJobWithDelayAsync(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, int parentJobId, string referringTaskUrl, string instanceControlLabel, int runAfterDelaySeconds) {
            this.SubmitJobWithDelayAsync(sourceId, sourceTypeId, sourceOrderId, url, queryString, parentJobId, referringTaskUrl, instanceControlLabel, runAfterDelaySeconds, null);
        }
        
        /// <remarks/>
        public void SubmitJobWithDelayAsync(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, int parentJobId, string referringTaskUrl, string instanceControlLabel, int runAfterDelaySeconds, object userState) {
            if ((this.SubmitJobWithDelayOperationCompleted == null)) {
                this.SubmitJobWithDelayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitJobWithDelayOperationCompleted);
            }
            this.InvokeAsync("SubmitJobWithDelay", new object[] {
                        sourceId,
                        sourceTypeId,
                        sourceOrderId,
                        url,
                        queryString,
                        parentJobId,
                        referringTaskUrl,
                        instanceControlLabel,
                        runAfterDelaySeconds}, this.SubmitJobWithDelayOperationCompleted, userState);
        }
        
        private void OnSubmitJobWithDelayOperationCompleted(object arg) {
            if ((this.SubmitJobWithDelayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitJobWithDelayCompleted(this, new SubmitJobWithDelayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/SubmitJobWithCombine", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SubmitJobWithCombine(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, int parentJobId, string referringTaskUrl, string instanceControlLabel) {
            object[] results = this.Invoke("SubmitJobWithCombine", new object[] {
                        sourceId,
                        sourceTypeId,
                        sourceOrderId,
                        url,
                        queryString,
                        parentJobId,
                        referringTaskUrl,
                        instanceControlLabel});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitJobWithCombineAsync(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, int parentJobId, string referringTaskUrl, string instanceControlLabel) {
            this.SubmitJobWithCombineAsync(sourceId, sourceTypeId, sourceOrderId, url, queryString, parentJobId, referringTaskUrl, instanceControlLabel, null);
        }
        
        /// <remarks/>
        public void SubmitJobWithCombineAsync(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, int parentJobId, string referringTaskUrl, string instanceControlLabel, object userState) {
            if ((this.SubmitJobWithCombineOperationCompleted == null)) {
                this.SubmitJobWithCombineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitJobWithCombineOperationCompleted);
            }
            this.InvokeAsync("SubmitJobWithCombine", new object[] {
                        sourceId,
                        sourceTypeId,
                        sourceOrderId,
                        url,
                        queryString,
                        parentJobId,
                        referringTaskUrl,
                        instanceControlLabel}, this.SubmitJobWithCombineOperationCompleted, userState);
        }
        
        private void OnSubmitJobWithCombineOperationCompleted(object arg) {
            if ((this.SubmitJobWithCombineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitJobWithCombineCompleted(this, new SubmitJobWithCombineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/SubmitJobWithCombineAndDelay", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SubmitJobWithCombineAndDelay(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, int parentJobId, string referringTaskUrl, string instanceControlLabel, int runAfterDelaySeconds) {
            object[] results = this.Invoke("SubmitJobWithCombineAndDelay", new object[] {
                        sourceId,
                        sourceTypeId,
                        sourceOrderId,
                        url,
                        queryString,
                        parentJobId,
                        referringTaskUrl,
                        instanceControlLabel,
                        runAfterDelaySeconds});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitJobWithCombineAndDelayAsync(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, int parentJobId, string referringTaskUrl, string instanceControlLabel, int runAfterDelaySeconds) {
            this.SubmitJobWithCombineAndDelayAsync(sourceId, sourceTypeId, sourceOrderId, url, queryString, parentJobId, referringTaskUrl, instanceControlLabel, runAfterDelaySeconds, null);
        }
        
        /// <remarks/>
        public void SubmitJobWithCombineAndDelayAsync(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, int parentJobId, string referringTaskUrl, string instanceControlLabel, int runAfterDelaySeconds, object userState) {
            if ((this.SubmitJobWithCombineAndDelayOperationCompleted == null)) {
                this.SubmitJobWithCombineAndDelayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitJobWithCombineAndDelayOperationCompleted);
            }
            this.InvokeAsync("SubmitJobWithCombineAndDelay", new object[] {
                        sourceId,
                        sourceTypeId,
                        sourceOrderId,
                        url,
                        queryString,
                        parentJobId,
                        referringTaskUrl,
                        instanceControlLabel,
                        runAfterDelaySeconds}, this.SubmitJobWithCombineAndDelayOperationCompleted, userState);
        }
        
        private void OnSubmitJobWithCombineAndDelayOperationCompleted(object arg) {
            if ((this.SubmitJobWithCombineAndDelayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitJobWithCombineAndDelayCompleted(this, new SubmitJobWithCombineAndDelayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/SubmitJobWithOutputPath", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SubmitJobWithOutputPath(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, string outputFilePath, int parentJobId, string referringTaskUrl, string instanceControlLabel) {
            object[] results = this.Invoke("SubmitJobWithOutputPath", new object[] {
                        sourceId,
                        sourceTypeId,
                        sourceOrderId,
                        url,
                        queryString,
                        outputFilePath,
                        parentJobId,
                        referringTaskUrl,
                        instanceControlLabel});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitJobWithOutputPathAsync(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, string outputFilePath, int parentJobId, string referringTaskUrl, string instanceControlLabel) {
            this.SubmitJobWithOutputPathAsync(sourceId, sourceTypeId, sourceOrderId, url, queryString, outputFilePath, parentJobId, referringTaskUrl, instanceControlLabel, null);
        }
        
        /// <remarks/>
        public void SubmitJobWithOutputPathAsync(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, string outputFilePath, int parentJobId, string referringTaskUrl, string instanceControlLabel, object userState) {
            if ((this.SubmitJobWithOutputPathOperationCompleted == null)) {
                this.SubmitJobWithOutputPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitJobWithOutputPathOperationCompleted);
            }
            this.InvokeAsync("SubmitJobWithOutputPath", new object[] {
                        sourceId,
                        sourceTypeId,
                        sourceOrderId,
                        url,
                        queryString,
                        outputFilePath,
                        parentJobId,
                        referringTaskUrl,
                        instanceControlLabel}, this.SubmitJobWithOutputPathOperationCompleted, userState);
        }
        
        private void OnSubmitJobWithOutputPathOperationCompleted(object arg) {
            if ((this.SubmitJobWithOutputPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitJobWithOutputPathCompleted(this, new SubmitJobWithOutputPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/SubmitJobWithOutputPathAndDelay", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SubmitJobWithOutputPathAndDelay(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, string outputFilePath, int parentJobId, string referringTaskUrl, string instanceControlLabel, int runAfterDelaySeconds) {
            object[] results = this.Invoke("SubmitJobWithOutputPathAndDelay", new object[] {
                        sourceId,
                        sourceTypeId,
                        sourceOrderId,
                        url,
                        queryString,
                        outputFilePath,
                        parentJobId,
                        referringTaskUrl,
                        instanceControlLabel,
                        runAfterDelaySeconds});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitJobWithOutputPathAndDelayAsync(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, string outputFilePath, int parentJobId, string referringTaskUrl, string instanceControlLabel, int runAfterDelaySeconds) {
            this.SubmitJobWithOutputPathAndDelayAsync(sourceId, sourceTypeId, sourceOrderId, url, queryString, outputFilePath, parentJobId, referringTaskUrl, instanceControlLabel, runAfterDelaySeconds, null);
        }
        
        /// <remarks/>
        public void SubmitJobWithOutputPathAndDelayAsync(string sourceId, short sourceTypeId, string sourceOrderId, string url, string queryString, string outputFilePath, int parentJobId, string referringTaskUrl, string instanceControlLabel, int runAfterDelaySeconds, object userState) {
            if ((this.SubmitJobWithOutputPathAndDelayOperationCompleted == null)) {
                this.SubmitJobWithOutputPathAndDelayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitJobWithOutputPathAndDelayOperationCompleted);
            }
            this.InvokeAsync("SubmitJobWithOutputPathAndDelay", new object[] {
                        sourceId,
                        sourceTypeId,
                        sourceOrderId,
                        url,
                        queryString,
                        outputFilePath,
                        parentJobId,
                        referringTaskUrl,
                        instanceControlLabel,
                        runAfterDelaySeconds}, this.SubmitJobWithOutputPathAndDelayOperationCompleted, userState);
        }
        
        private void OnSubmitJobWithOutputPathAndDelayOperationCompleted(object arg) {
            if ((this.SubmitJobWithOutputPathAndDelayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitJobWithOutputPathAndDelayCompleted(this, new SubmitJobWithOutputPathAndDelayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/X", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string X([System.Xml.Serialization.XmlElementAttribute("x")] string x1) {
            object[] results = this.Invoke("X", new object[] {
                        x1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void XAsync(string x1) {
            this.XAsync(x1, null);
        }
        
        /// <remarks/>
        public void XAsync(string x1, object userState) {
            if ((this.XOperationCompleted == null)) {
                this.XOperationCompleted = new System.Threading.SendOrPostCallback(this.OnXOperationCompleted);
            }
            this.InvokeAsync("X", new object[] {
                        x1}, this.XOperationCompleted, userState);
        }
        
        private void OnXOperationCompleted(object arg) {
            if ((this.XCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.XCompleted(this, new XCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/GetTaskList", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskDefinition[] GetTaskList() {
            object[] results = this.Invoke("GetTaskList", new object[0]);
            return ((TaskDefinition[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskListAsync() {
            this.GetTaskListAsync(null);
        }
        
        /// <remarks/>
        public void GetTaskListAsync(object userState) {
            if ((this.GetTaskListOperationCompleted == null)) {
                this.GetTaskListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskListOperationCompleted);
            }
            this.InvokeAsync("GetTaskList", new object[0], this.GetTaskListOperationCompleted, userState);
        }
        
        private void OnGetTaskListOperationCompleted(object arg) {
            if ((this.GetTaskListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskListCompleted(this, new GetTaskListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/GetStatuses", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public JobStatus[] GetStatuses() {
            object[] results = this.Invoke("GetStatuses", new object[0]);
            return ((JobStatus[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStatusesAsync() {
            this.GetStatusesAsync(null);
        }
        
        /// <remarks/>
        public void GetStatusesAsync(object userState) {
            if ((this.GetStatusesOperationCompleted == null)) {
                this.GetStatusesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatusesOperationCompleted);
            }
            this.InvokeAsync("GetStatuses", new object[0], this.GetStatusesOperationCompleted, userState);
        }
        
        private void OnGetStatusesOperationCompleted(object arg) {
            if ((this.GetStatusesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatusesCompleted(this, new GetStatusesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/OcrCompletedCallBack", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OcrCompletedCallBack(int jobId) {
            object[] results = this.Invoke("OcrCompletedCallBack", new object[] {
                        jobId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OcrCompletedCallBackAsync(int jobId) {
            this.OcrCompletedCallBackAsync(jobId, null);
        }
        
        /// <remarks/>
        public void OcrCompletedCallBackAsync(int jobId, object userState) {
            if ((this.OcrCompletedCallBackOperationCompleted == null)) {
                this.OcrCompletedCallBackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOcrCompletedCallBackOperationCompleted);
            }
            this.InvokeAsync("OcrCompletedCallBack", new object[] {
                        jobId}, this.OcrCompletedCallBackOperationCompleted, userState);
        }
        
        private void OnOcrCompletedCallBackOperationCompleted(object arg) {
            if ((this.OcrCompletedCallBackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OcrCompletedCallBackCompleted(this, new OcrCompletedCallBackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/CombineCompletedCallBack", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CombineCompletedCallBack(int jobId) {
            object[] results = this.Invoke("CombineCompletedCallBack", new object[] {
                        jobId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CombineCompletedCallBackAsync(int jobId) {
            this.CombineCompletedCallBackAsync(jobId, null);
        }
        
        /// <remarks/>
        public void CombineCompletedCallBackAsync(int jobId, object userState) {
            if ((this.CombineCompletedCallBackOperationCompleted == null)) {
                this.CombineCompletedCallBackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCombineCompletedCallBackOperationCompleted);
            }
            this.InvokeAsync("CombineCompletedCallBack", new object[] {
                        jobId}, this.CombineCompletedCallBackOperationCompleted, userState);
        }
        
        private void OnCombineCompletedCallBackOperationCompleted(object arg) {
            if ((this.CombineCompletedCallBackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CombineCompletedCallBackCompleted(this, new CombineCompletedCallBackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/SubmitJobWithOcr", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SubmitJobWithOcr(short priority, short ocrTypeId, string sourceId, short sourceTypeId, int sourceOrderId, string url, string queryString, string outputFilePath, int parentJobId, string referringTaskUrl, string filename, short ocrEnvironmentId, bool deleteImageSource) {
            object[] results = this.Invoke("SubmitJobWithOcr", new object[] {
                        priority,
                        ocrTypeId,
                        sourceId,
                        sourceTypeId,
                        sourceOrderId,
                        url,
                        queryString,
                        outputFilePath,
                        parentJobId,
                        referringTaskUrl,
                        filename,
                        ocrEnvironmentId,
                        deleteImageSource});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitJobWithOcrAsync(short priority, short ocrTypeId, string sourceId, short sourceTypeId, int sourceOrderId, string url, string queryString, string outputFilePath, int parentJobId, string referringTaskUrl, string filename, short ocrEnvironmentId, bool deleteImageSource) {
            this.SubmitJobWithOcrAsync(priority, ocrTypeId, sourceId, sourceTypeId, sourceOrderId, url, queryString, outputFilePath, parentJobId, referringTaskUrl, filename, ocrEnvironmentId, deleteImageSource, null);
        }
        
        /// <remarks/>
        public void SubmitJobWithOcrAsync(short priority, short ocrTypeId, string sourceId, short sourceTypeId, int sourceOrderId, string url, string queryString, string outputFilePath, int parentJobId, string referringTaskUrl, string filename, short ocrEnvironmentId, bool deleteImageSource, object userState) {
            if ((this.SubmitJobWithOcrOperationCompleted == null)) {
                this.SubmitJobWithOcrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitJobWithOcrOperationCompleted);
            }
            this.InvokeAsync("SubmitJobWithOcr", new object[] {
                        priority,
                        ocrTypeId,
                        sourceId,
                        sourceTypeId,
                        sourceOrderId,
                        url,
                        queryString,
                        outputFilePath,
                        parentJobId,
                        referringTaskUrl,
                        filename,
                        ocrEnvironmentId,
                        deleteImageSource}, this.SubmitJobWithOcrOperationCompleted, userState);
        }
        
        private void OnSubmitJobWithOcrOperationCompleted(object arg) {
            if ((this.SubmitJobWithOcrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitJobWithOcrCompleted(this, new SubmitJobWithOcrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/SubmitJobWithOcrAndDelay", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SubmitJobWithOcrAndDelay(short priority, short ocrTypeId, string sourceId, short sourceTypeId, int sourceOrderId, string url, string queryString, string outputFilePath, int parentJobId, string referringTaskUrl, string filename, short ocrEnvironmentId, bool deleteImageSource, int runAfterDelaySeconds) {
            object[] results = this.Invoke("SubmitJobWithOcrAndDelay", new object[] {
                        priority,
                        ocrTypeId,
                        sourceId,
                        sourceTypeId,
                        sourceOrderId,
                        url,
                        queryString,
                        outputFilePath,
                        parentJobId,
                        referringTaskUrl,
                        filename,
                        ocrEnvironmentId,
                        deleteImageSource,
                        runAfterDelaySeconds});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitJobWithOcrAndDelayAsync(short priority, short ocrTypeId, string sourceId, short sourceTypeId, int sourceOrderId, string url, string queryString, string outputFilePath, int parentJobId, string referringTaskUrl, string filename, short ocrEnvironmentId, bool deleteImageSource, int runAfterDelaySeconds) {
            this.SubmitJobWithOcrAndDelayAsync(priority, ocrTypeId, sourceId, sourceTypeId, sourceOrderId, url, queryString, outputFilePath, parentJobId, referringTaskUrl, filename, ocrEnvironmentId, deleteImageSource, runAfterDelaySeconds, null);
        }
        
        /// <remarks/>
        public void SubmitJobWithOcrAndDelayAsync(short priority, short ocrTypeId, string sourceId, short sourceTypeId, int sourceOrderId, string url, string queryString, string outputFilePath, int parentJobId, string referringTaskUrl, string filename, short ocrEnvironmentId, bool deleteImageSource, int runAfterDelaySeconds, object userState) {
            if ((this.SubmitJobWithOcrAndDelayOperationCompleted == null)) {
                this.SubmitJobWithOcrAndDelayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitJobWithOcrAndDelayOperationCompleted);
            }
            this.InvokeAsync("SubmitJobWithOcrAndDelay", new object[] {
                        priority,
                        ocrTypeId,
                        sourceId,
                        sourceTypeId,
                        sourceOrderId,
                        url,
                        queryString,
                        outputFilePath,
                        parentJobId,
                        referringTaskUrl,
                        filename,
                        ocrEnvironmentId,
                        deleteImageSource,
                        runAfterDelaySeconds}, this.SubmitJobWithOcrAndDelayOperationCompleted, userState);
        }
        
        private void OnSubmitJobWithOcrAndDelayOperationCompleted(object arg) {
            if ((this.SubmitJobWithOcrAndDelayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitJobWithOcrAndDelayCompleted(this, new SubmitJobWithOcrAndDelayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/SissyWatchStats", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SissyWatchStats(int method, string start, string end) {
            object[] results = this.Invoke("SissyWatchStats", new object[] {
                        method,
                        start,
                        end});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SissyWatchStatsAsync(int method, string start, string end) {
            this.SissyWatchStatsAsync(method, start, end, null);
        }
        
        /// <remarks/>
        public void SissyWatchStatsAsync(int method, string start, string end, object userState) {
            if ((this.SissyWatchStatsOperationCompleted == null)) {
                this.SissyWatchStatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSissyWatchStatsOperationCompleted);
            }
            this.InvokeAsync("SissyWatchStats", new object[] {
                        method,
                        start,
                        end}, this.SissyWatchStatsOperationCompleted, userState);
        }
        
        private void OnSissyWatchStatsOperationCompleted(object arg) {
            if ((this.SissyWatchStatsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SissyWatchStatsCompleted(this, new SissyWatchStatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/GetAllInstanceControls", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllInstanceControls() {
            object[] results = this.Invoke("GetAllInstanceControls", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllInstanceControlsAsync() {
            this.GetAllInstanceControlsAsync(null);
        }
        
        /// <remarks/>
        public void GetAllInstanceControlsAsync(object userState) {
            if ((this.GetAllInstanceControlsOperationCompleted == null)) {
                this.GetAllInstanceControlsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllInstanceControlsOperationCompleted);
            }
            this.InvokeAsync("GetAllInstanceControls", new object[0], this.GetAllInstanceControlsOperationCompleted, userState);
        }
        
        private void OnGetAllInstanceControlsOperationCompleted(object arg) {
            if ((this.GetAllInstanceControlsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllInstanceControlsCompleted(this, new GetAllInstanceControlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/GetJobData", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetJobData(string sourceId, string sourceOrderId, string url, int parentJobId, string referringTaskUrl, string statusIds, string instanceControlLabel, string sourceTypeId) {
            object[] results = this.Invoke("GetJobData", new object[] {
                        sourceId,
                        sourceOrderId,
                        url,
                        parentJobId,
                        referringTaskUrl,
                        statusIds,
                        instanceControlLabel,
                        sourceTypeId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetJobDataAsync(string sourceId, string sourceOrderId, string url, int parentJobId, string referringTaskUrl, string statusIds, string instanceControlLabel, string sourceTypeId) {
            this.GetJobDataAsync(sourceId, sourceOrderId, url, parentJobId, referringTaskUrl, statusIds, instanceControlLabel, sourceTypeId, null);
        }
        
        /// <remarks/>
        public void GetJobDataAsync(string sourceId, string sourceOrderId, string url, int parentJobId, string referringTaskUrl, string statusIds, string instanceControlLabel, string sourceTypeId, object userState) {
            if ((this.GetJobDataOperationCompleted == null)) {
                this.GetJobDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobDataOperationCompleted);
            }
            this.InvokeAsync("GetJobData", new object[] {
                        sourceId,
                        sourceOrderId,
                        url,
                        parentJobId,
                        referringTaskUrl,
                        statusIds,
                        instanceControlLabel,
                        sourceTypeId}, this.GetJobDataOperationCompleted, userState);
        }
        
        private void OnGetJobDataOperationCompleted(object arg) {
            if ((this.GetJobDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobDataCompleted(this, new GetJobDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/GetJobSimpleData", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetJobSimpleData(string sourceId, string sourceOrderId, string url, int parentJobId, string referringTaskUrl, string statusIds, string instanceControlLabel, string taskIds, short sourceTypeId) {
            object[] results = this.Invoke("GetJobSimpleData", new object[] {
                        sourceId,
                        sourceOrderId,
                        url,
                        parentJobId,
                        referringTaskUrl,
                        statusIds,
                        instanceControlLabel,
                        taskIds,
                        sourceTypeId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetJobSimpleDataAsync(string sourceId, string sourceOrderId, string url, int parentJobId, string referringTaskUrl, string statusIds, string instanceControlLabel, string taskIds, short sourceTypeId) {
            this.GetJobSimpleDataAsync(sourceId, sourceOrderId, url, parentJobId, referringTaskUrl, statusIds, instanceControlLabel, taskIds, sourceTypeId, null);
        }
        
        /// <remarks/>
        public void GetJobSimpleDataAsync(string sourceId, string sourceOrderId, string url, int parentJobId, string referringTaskUrl, string statusIds, string instanceControlLabel, string taskIds, short sourceTypeId, object userState) {
            if ((this.GetJobSimpleDataOperationCompleted == null)) {
                this.GetJobSimpleDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobSimpleDataOperationCompleted);
            }
            this.InvokeAsync("GetJobSimpleData", new object[] {
                        sourceId,
                        sourceOrderId,
                        url,
                        parentJobId,
                        referringTaskUrl,
                        statusIds,
                        instanceControlLabel,
                        taskIds,
                        sourceTypeId}, this.GetJobSimpleDataOperationCompleted, userState);
        }
        
        private void OnGetJobSimpleDataOperationCompleted(object arg) {
            if ((this.GetJobSimpleDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobSimpleDataCompleted(this, new GetJobSimpleDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/GetUnfinishedJobs", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUnfinishedJobs(string sourceId, string sourceOrderId, string url, string referringTaskUrl, string taskIds, string statusIds, string sourceTypeId) {
            object[] results = this.Invoke("GetUnfinishedJobs", new object[] {
                        sourceId,
                        sourceOrderId,
                        url,
                        referringTaskUrl,
                        taskIds,
                        statusIds,
                        sourceTypeId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUnfinishedJobsAsync(string sourceId, string sourceOrderId, string url, string referringTaskUrl, string taskIds, string statusIds, string sourceTypeId) {
            this.GetUnfinishedJobsAsync(sourceId, sourceOrderId, url, referringTaskUrl, taskIds, statusIds, sourceTypeId, null);
        }
        
        /// <remarks/>
        public void GetUnfinishedJobsAsync(string sourceId, string sourceOrderId, string url, string referringTaskUrl, string taskIds, string statusIds, string sourceTypeId, object userState) {
            if ((this.GetUnfinishedJobsOperationCompleted == null)) {
                this.GetUnfinishedJobsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnfinishedJobsOperationCompleted);
            }
            this.InvokeAsync("GetUnfinishedJobs", new object[] {
                        sourceId,
                        sourceOrderId,
                        url,
                        referringTaskUrl,
                        taskIds,
                        statusIds,
                        sourceTypeId}, this.GetUnfinishedJobsOperationCompleted, userState);
        }
        
        private void OnGetUnfinishedJobsOperationCompleted(object arg) {
            if ((this.GetUnfinishedJobsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnfinishedJobsCompleted(this, new GetUnfinishedJobsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/GetJobDebugById", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetJobDebugById(int jobId) {
            object[] results = this.Invoke("GetJobDebugById", new object[] {
                        jobId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetJobDebugByIdAsync(int jobId) {
            this.GetJobDebugByIdAsync(jobId, null);
        }
        
        /// <remarks/>
        public void GetJobDebugByIdAsync(int jobId, object userState) {
            if ((this.GetJobDebugByIdOperationCompleted == null)) {
                this.GetJobDebugByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobDebugByIdOperationCompleted);
            }
            this.InvokeAsync("GetJobDebugById", new object[] {
                        jobId}, this.GetJobDebugByIdOperationCompleted, userState);
        }
        
        private void OnGetJobDebugByIdOperationCompleted(object arg) {
            if ((this.GetJobDebugByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobDebugByIdCompleted(this, new GetJobDebugByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/GetProcessingBoxCpuUsage", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProcessingBoxCpuUsage() {
            object[] results = this.Invoke("GetProcessingBoxCpuUsage", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessingBoxCpuUsageAsync() {
            this.GetProcessingBoxCpuUsageAsync(null);
        }
        
        /// <remarks/>
        public void GetProcessingBoxCpuUsageAsync(object userState) {
            if ((this.GetProcessingBoxCpuUsageOperationCompleted == null)) {
                this.GetProcessingBoxCpuUsageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessingBoxCpuUsageOperationCompleted);
            }
            this.InvokeAsync("GetProcessingBoxCpuUsage", new object[0], this.GetProcessingBoxCpuUsageOperationCompleted, userState);
        }
        
        private void OnGetProcessingBoxCpuUsageOperationCompleted(object arg) {
            if ((this.GetProcessingBoxCpuUsageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessingBoxCpuUsageCompleted(this, new GetProcessingBoxCpuUsageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/IssueKillCommand", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IssueKillCommand(string sourceOrderId) {
            object[] results = this.Invoke("IssueKillCommand", new object[] {
                        sourceOrderId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IssueKillCommandAsync(string sourceOrderId) {
            this.IssueKillCommandAsync(sourceOrderId, null);
        }
        
        /// <remarks/>
        public void IssueKillCommandAsync(string sourceOrderId, object userState) {
            if ((this.IssueKillCommandOperationCompleted == null)) {
                this.IssueKillCommandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIssueKillCommandOperationCompleted);
            }
            this.InvokeAsync("IssueKillCommand", new object[] {
                        sourceOrderId}, this.IssueKillCommandOperationCompleted, userState);
        }
        
        private void OnIssueKillCommandOperationCompleted(object arg) {
            if ((this.IssueKillCommandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IssueKillCommandCompleted(this, new IssueKillCommandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/TestMethod", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestMethod(string resultData) {
            object[] results = this.Invoke("TestMethod", new object[] {
                        resultData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestMethodAsync(string resultData) {
            this.TestMethodAsync(resultData, null);
        }
        
        /// <remarks/>
        public void TestMethodAsync(string resultData, object userState) {
            if ((this.TestMethodOperationCompleted == null)) {
                this.TestMethodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestMethodOperationCompleted);
            }
            this.InvokeAsync("TestMethod", new object[] {
                        resultData}, this.TestMethodOperationCompleted, userState);
        }
        
        private void OnTestMethodOperationCompleted(object arg) {
            if ((this.TestMethodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestMethodCompleted(this, new TestMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/GetJobIdFromHostname", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetJobIdFromHostname(string hostname) {
            object[] results = this.Invoke("GetJobIdFromHostname", new object[] {
                        hostname});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetJobIdFromHostnameAsync(string hostname) {
            this.GetJobIdFromHostnameAsync(hostname, null);
        }
        
        /// <remarks/>
        public void GetJobIdFromHostnameAsync(string hostname, object userState) {
            if ((this.GetJobIdFromHostnameOperationCompleted == null)) {
                this.GetJobIdFromHostnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobIdFromHostnameOperationCompleted);
            }
            this.InvokeAsync("GetJobIdFromHostname", new object[] {
                        hostname}, this.GetJobIdFromHostnameOperationCompleted, userState);
        }
        
        private void OnGetJobIdFromHostnameOperationCompleted(object arg) {
            if ((this.GetJobIdFromHostnameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobIdFromHostnameCompleted(this, new GetJobIdFromHostnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/GetJobIdFromHostnameDebug", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetJobIdFromHostnameDebug(string hostname) {
            object[] results = this.Invoke("GetJobIdFromHostnameDebug", new object[] {
                        hostname});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetJobIdFromHostnameDebugAsync(string hostname) {
            this.GetJobIdFromHostnameDebugAsync(hostname, null);
        }
        
        /// <remarks/>
        public void GetJobIdFromHostnameDebugAsync(string hostname, object userState) {
            if ((this.GetJobIdFromHostnameDebugOperationCompleted == null)) {
                this.GetJobIdFromHostnameDebugOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobIdFromHostnameDebugOperationCompleted);
            }
            this.InvokeAsync("GetJobIdFromHostnameDebug", new object[] {
                        hostname}, this.GetJobIdFromHostnameDebugOperationCompleted, userState);
        }
        
        private void OnGetJobIdFromHostnameDebugOperationCompleted(object arg) {
            if ((this.GetJobIdFromHostnameDebugCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobIdFromHostnameDebugCompleted(this, new GetJobIdFromHostnameDebugCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/ChangeTaskServerType", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangeTaskServerType(int taskId, int serverTypeId) {
            object[] results = this.Invoke("ChangeTaskServerType", new object[] {
                        taskId,
                        serverTypeId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeTaskServerTypeAsync(int taskId, int serverTypeId) {
            this.ChangeTaskServerTypeAsync(taskId, serverTypeId, null);
        }
        
        /// <remarks/>
        public void ChangeTaskServerTypeAsync(int taskId, int serverTypeId, object userState) {
            if ((this.ChangeTaskServerTypeOperationCompleted == null)) {
                this.ChangeTaskServerTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeTaskServerTypeOperationCompleted);
            }
            this.InvokeAsync("ChangeTaskServerType", new object[] {
                        taskId,
                        serverTypeId}, this.ChangeTaskServerTypeOperationCompleted, userState);
        }
        
        private void OnChangeTaskServerTypeOperationCompleted(object arg) {
            if ((this.ChangeTaskServerTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeTaskServerTypeCompleted(this, new ChangeTaskServerTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/ChangeServerTypeId", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangeServerTypeId(string hostname, int serverTypeId) {
            object[] results = this.Invoke("ChangeServerTypeId", new object[] {
                        hostname,
                        serverTypeId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeServerTypeIdAsync(string hostname, int serverTypeId) {
            this.ChangeServerTypeIdAsync(hostname, serverTypeId, null);
        }
        
        /// <remarks/>
        public void ChangeServerTypeIdAsync(string hostname, int serverTypeId, object userState) {
            if ((this.ChangeServerTypeIdOperationCompleted == null)) {
                this.ChangeServerTypeIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeServerTypeIdOperationCompleted);
            }
            this.InvokeAsync("ChangeServerTypeId", new object[] {
                        hostname,
                        serverTypeId}, this.ChangeServerTypeIdOperationCompleted, userState);
        }
        
        private void OnChangeServerTypeIdOperationCompleted(object arg) {
            if ((this.ChangeServerTypeIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeServerTypeIdCompleted(this, new ChangeServerTypeIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/ChangeServerAnyId", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangeServerAnyId(string hostname, int anyId) {
            object[] results = this.Invoke("ChangeServerAnyId", new object[] {
                        hostname,
                        anyId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeServerAnyIdAsync(string hostname, int anyId) {
            this.ChangeServerAnyIdAsync(hostname, anyId, null);
        }
        
        /// <remarks/>
        public void ChangeServerAnyIdAsync(string hostname, int anyId, object userState) {
            if ((this.ChangeServerAnyIdOperationCompleted == null)) {
                this.ChangeServerAnyIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeServerAnyIdOperationCompleted);
            }
            this.InvokeAsync("ChangeServerAnyId", new object[] {
                        hostname,
                        anyId}, this.ChangeServerAnyIdOperationCompleted, userState);
        }
        
        private void OnChangeServerAnyIdOperationCompleted(object arg) {
            if ((this.ChangeServerAnyIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeServerAnyIdCompleted(this, new ChangeServerAnyIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/AddServerToServerTable", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddServerToServerTable(string hostname) {
            object[] results = this.Invoke("AddServerToServerTable", new object[] {
                        hostname});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddServerToServerTableAsync(string hostname) {
            this.AddServerToServerTableAsync(hostname, null);
        }
        
        /// <remarks/>
        public void AddServerToServerTableAsync(string hostname, object userState) {
            if ((this.AddServerToServerTableOperationCompleted == null)) {
                this.AddServerToServerTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddServerToServerTableOperationCompleted);
            }
            this.InvokeAsync("AddServerToServerTable", new object[] {
                        hostname}, this.AddServerToServerTableOperationCompleted, userState);
        }
        
        private void OnAddServerToServerTableOperationCompleted(object arg) {
            if ((this.AddServerToServerTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddServerToServerTableCompleted(this, new AddServerToServerTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/AddRejectOrderTaskException", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddRejectOrderTaskException(int taskId, int orderTypeId, int companyId, string state, string county) {
            object[] results = this.Invoke("AddRejectOrderTaskException", new object[] {
                        taskId,
                        orderTypeId,
                        companyId,
                        state,
                        county});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddRejectOrderTaskExceptionAsync(int taskId, int orderTypeId, int companyId, string state, string county) {
            this.AddRejectOrderTaskExceptionAsync(taskId, orderTypeId, companyId, state, county, null);
        }
        
        /// <remarks/>
        public void AddRejectOrderTaskExceptionAsync(int taskId, int orderTypeId, int companyId, string state, string county, object userState) {
            if ((this.AddRejectOrderTaskExceptionOperationCompleted == null)) {
                this.AddRejectOrderTaskExceptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRejectOrderTaskExceptionOperationCompleted);
            }
            this.InvokeAsync("AddRejectOrderTaskException", new object[] {
                        taskId,
                        orderTypeId,
                        companyId,
                        state,
                        county}, this.AddRejectOrderTaskExceptionOperationCompleted, userState);
        }
        
        private void OnAddRejectOrderTaskExceptionOperationCompleted(object arg) {
            if ((this.AddRejectOrderTaskExceptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRejectOrderTaskExceptionCompleted(this, new AddRejectOrderTaskExceptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://syswatch2.nextace.com/GetJobsThatContainValue", RequestNamespace="http://syswatch2.nextace.com/", ResponseNamespace="http://syswatch2.nextace.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetJobsThatContainValue(string sourceOrderId, string valueToSearch) {
            object[] results = this.Invoke("GetJobsThatContainValue", new object[] {
                        sourceOrderId,
                        valueToSearch});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetJobsThatContainValueAsync(string sourceOrderId, string valueToSearch) {
            this.GetJobsThatContainValueAsync(sourceOrderId, valueToSearch, null);
        }
        
        /// <remarks/>
        public void GetJobsThatContainValueAsync(string sourceOrderId, string valueToSearch, object userState) {
            if ((this.GetJobsThatContainValueOperationCompleted == null)) {
                this.GetJobsThatContainValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetJobsThatContainValueOperationCompleted);
            }
            this.InvokeAsync("GetJobsThatContainValue", new object[] {
                        sourceOrderId,
                        valueToSearch}, this.GetJobsThatContainValueOperationCompleted, userState);
        }
        
        private void OnGetJobsThatContainValueOperationCompleted(object arg) {
            if ((this.GetJobsThatContainValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetJobsThatContainValueCompleted(this, new GetJobsThatContainValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://syswatch2.nextace.com/")]
    public partial class TaskDefinition {
        
        private string targetField;
        
        private int taskIdField;
        
        private string nameField;
        
        private int maxTimeSecsField;
        
        /// <remarks/>
        public string Target {
            get {
                return this.targetField;
            }
            set {
                this.targetField = value;
            }
        }
        
        /// <remarks/>
        public int TaskId {
            get {
                return this.taskIdField;
            }
            set {
                this.taskIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int MaxTimeSecs {
            get {
                return this.maxTimeSecsField;
            }
            set {
                this.maxTimeSecsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://syswatch2.nextace.com/")]
    public partial class JobStatus {
        
        private short idField;
        
        private string nameField;
        
        /// <remarks/>
        public short Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://syswatch2.nextace.com/")]
    public partial class ServerPropertyCapacity {
        
        private int serverPropertyCapacityIdField;
        
        private short serverIdField;
        
        private int propertyIdField;
        
        private Server serverField;
        
        private decimal capacityField;
        
        /// <remarks/>
        public int ServerPropertyCapacityId {
            get {
                return this.serverPropertyCapacityIdField;
            }
            set {
                this.serverPropertyCapacityIdField = value;
            }
        }
        
        /// <remarks/>
        public short ServerId {
            get {
                return this.serverIdField;
            }
            set {
                this.serverIdField = value;
            }
        }
        
        /// <remarks/>
        public int PropertyId {
            get {
                return this.propertyIdField;
            }
            set {
                this.propertyIdField = value;
            }
        }
        
        /// <remarks/>
        public Server Server {
            get {
                return this.serverField;
            }
            set {
                this.serverField = value;
            }
        }
        
        /// <remarks/>
        public decimal Capacity {
            get {
                return this.capacityField;
            }
            set {
                this.capacityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://syswatch2.nextace.com/")]
    public partial class Server {
        
        private short serverIdField;
        
        private string hostNameField;
        
        private string domainNameField;
        
        private ServerPropertyCapacity[] propertyCapacitiesField;
        
        /// <remarks/>
        public short ServerId {
            get {
                return this.serverIdField;
            }
            set {
                this.serverIdField = value;
            }
        }
        
        /// <remarks/>
        public string HostName {
            get {
                return this.hostNameField;
            }
            set {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        public string DomainName {
            get {
                return this.domainNameField;
            }
            set {
                this.domainNameField = value;
            }
        }
        
        /// <remarks/>
        public ServerPropertyCapacity[] PropertyCapacities {
            get {
                return this.propertyCapacitiesField;
            }
            set {
                this.propertyCapacitiesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://syswatch2.nextace.com/")]
    public partial class JobStat {
        
        private int jobIdField;
        
        private int jobStatIdField;
        
        private int taskIdField;
        
        private System.DateTime dateStartedField;
        
        private System.DateTime dateFinishedField;
        
        private int objectIdField;
        
        private int propertyIdField;
        
        private Server serverField;
        
        private short serverIdField;
        
        private string hostNameField;
        
        private decimal minField;
        
        private decimal maxField;
        
        private decimal medianField;
        
        private decimal modField;
        
        private decimal varianceField;
        
        private decimal sumField;
        
        private decimal sampleSizeField;
        
        private bool shouldInsertIntoDbField;
        
        /// <remarks/>
        public int JobId {
            get {
                return this.jobIdField;
            }
            set {
                this.jobIdField = value;
            }
        }
        
        /// <remarks/>
        public int JobStatId {
            get {
                return this.jobStatIdField;
            }
            set {
                this.jobStatIdField = value;
            }
        }
        
        /// <remarks/>
        public int TaskId {
            get {
                return this.taskIdField;
            }
            set {
                this.taskIdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateStarted {
            get {
                return this.dateStartedField;
            }
            set {
                this.dateStartedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateFinished {
            get {
                return this.dateFinishedField;
            }
            set {
                this.dateFinishedField = value;
            }
        }
        
        /// <remarks/>
        public int ObjectId {
            get {
                return this.objectIdField;
            }
            set {
                this.objectIdField = value;
            }
        }
        
        /// <remarks/>
        public int PropertyId {
            get {
                return this.propertyIdField;
            }
            set {
                this.propertyIdField = value;
            }
        }
        
        /// <remarks/>
        public Server Server {
            get {
                return this.serverField;
            }
            set {
                this.serverField = value;
            }
        }
        
        /// <remarks/>
        public short ServerId {
            get {
                return this.serverIdField;
            }
            set {
                this.serverIdField = value;
            }
        }
        
        /// <remarks/>
        public string HostName {
            get {
                return this.hostNameField;
            }
            set {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        public decimal Min {
            get {
                return this.minField;
            }
            set {
                this.minField = value;
            }
        }
        
        /// <remarks/>
        public decimal Max {
            get {
                return this.maxField;
            }
            set {
                this.maxField = value;
            }
        }
        
        /// <remarks/>
        public decimal Median {
            get {
                return this.medianField;
            }
            set {
                this.medianField = value;
            }
        }
        
        /// <remarks/>
        public decimal Mod {
            get {
                return this.modField;
            }
            set {
                this.modField = value;
            }
        }
        
        /// <remarks/>
        public decimal Variance {
            get {
                return this.varianceField;
            }
            set {
                this.varianceField = value;
            }
        }
        
        /// <remarks/>
        public decimal Sum {
            get {
                return this.sumField;
            }
            set {
                this.sumField = value;
            }
        }
        
        /// <remarks/>
        public decimal SampleSize {
            get {
                return this.sampleSizeField;
            }
            set {
                this.sampleSizeField = value;
            }
        }
        
        /// <remarks/>
        public bool ShouldInsertIntoDb {
            get {
                return this.shouldInsertIntoDbField;
            }
            set {
                this.shouldInsertIntoDbField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void TestLoggerCompletedEventHandler(object sender, TestLoggerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestLoggerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestLoggerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void ListAllTasksCompletedEventHandler(object sender, ListAllTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListAllTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListAllTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskDefinition[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskDefinition[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void AlterTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void DeleteTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void UpdateInstanceControlCompletedEventHandler(object sender, UpdateInstanceControlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateInstanceControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateInstanceControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void DeleteInstanceControlCompletedEventHandler(object sender, DeleteInstanceControlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteInstanceControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteInstanceControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetInstanceControlListCompletedEventHandler(object sender, GetInstanceControlListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstanceControlListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInstanceControlListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void NotifyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetStatsByPropertyServerAndDateRangeCompletedEventHandler(object sender, GetStatsByPropertyServerAndDateRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatsByPropertyServerAndDateRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatsByPropertyServerAndDateRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public JobStat[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((JobStat[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void SubmitJobCompletedEventHandler(object sender, SubmitJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void SubmitJobWithDelayCompletedEventHandler(object sender, SubmitJobWithDelayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitJobWithDelayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitJobWithDelayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void SubmitJobWithCombineCompletedEventHandler(object sender, SubmitJobWithCombineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitJobWithCombineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitJobWithCombineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void SubmitJobWithCombineAndDelayCompletedEventHandler(object sender, SubmitJobWithCombineAndDelayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitJobWithCombineAndDelayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitJobWithCombineAndDelayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void SubmitJobWithOutputPathCompletedEventHandler(object sender, SubmitJobWithOutputPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitJobWithOutputPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitJobWithOutputPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void SubmitJobWithOutputPathAndDelayCompletedEventHandler(object sender, SubmitJobWithOutputPathAndDelayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitJobWithOutputPathAndDelayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitJobWithOutputPathAndDelayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void XCompletedEventHandler(object sender, XCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class XCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal XCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetTaskListCompletedEventHandler(object sender, GetTaskListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskDefinition[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskDefinition[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetStatusesCompletedEventHandler(object sender, GetStatusesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatusesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatusesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public JobStatus[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((JobStatus[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void OcrCompletedCallBackCompletedEventHandler(object sender, OcrCompletedCallBackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OcrCompletedCallBackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OcrCompletedCallBackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void CombineCompletedCallBackCompletedEventHandler(object sender, CombineCompletedCallBackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CombineCompletedCallBackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CombineCompletedCallBackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void SubmitJobWithOcrCompletedEventHandler(object sender, SubmitJobWithOcrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitJobWithOcrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitJobWithOcrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void SubmitJobWithOcrAndDelayCompletedEventHandler(object sender, SubmitJobWithOcrAndDelayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitJobWithOcrAndDelayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitJobWithOcrAndDelayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void SissyWatchStatsCompletedEventHandler(object sender, SissyWatchStatsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SissyWatchStatsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SissyWatchStatsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetAllInstanceControlsCompletedEventHandler(object sender, GetAllInstanceControlsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllInstanceControlsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllInstanceControlsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetJobDataCompletedEventHandler(object sender, GetJobDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetJobSimpleDataCompletedEventHandler(object sender, GetJobSimpleDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobSimpleDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobSimpleDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetUnfinishedJobsCompletedEventHandler(object sender, GetUnfinishedJobsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnfinishedJobsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnfinishedJobsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetJobDebugByIdCompletedEventHandler(object sender, GetJobDebugByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobDebugByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobDebugByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetProcessingBoxCpuUsageCompletedEventHandler(object sender, GetProcessingBoxCpuUsageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessingBoxCpuUsageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessingBoxCpuUsageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void IssueKillCommandCompletedEventHandler(object sender, IssueKillCommandCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IssueKillCommandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IssueKillCommandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void TestMethodCompletedEventHandler(object sender, TestMethodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetJobIdFromHostnameCompletedEventHandler(object sender, GetJobIdFromHostnameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobIdFromHostnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobIdFromHostnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetJobIdFromHostnameDebugCompletedEventHandler(object sender, GetJobIdFromHostnameDebugCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobIdFromHostnameDebugCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobIdFromHostnameDebugCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void ChangeTaskServerTypeCompletedEventHandler(object sender, ChangeTaskServerTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeTaskServerTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeTaskServerTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void ChangeServerTypeIdCompletedEventHandler(object sender, ChangeServerTypeIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeServerTypeIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeServerTypeIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void ChangeServerAnyIdCompletedEventHandler(object sender, ChangeServerAnyIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeServerAnyIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeServerAnyIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void AddServerToServerTableCompletedEventHandler(object sender, AddServerToServerTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddServerToServerTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddServerToServerTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void AddRejectOrderTaskExceptionCompletedEventHandler(object sender, AddRejectOrderTaskExceptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRejectOrderTaskExceptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRejectOrderTaskExceptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    public delegate void GetJobsThatContainValueCompletedEventHandler(object sender, GetJobsThatContainValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetJobsThatContainValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetJobsThatContainValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591